/**
 * Copyright (c) 2009 Mark de Bruijn (kramieb@gmail.com | Dykam)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this file (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * 1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.RACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
package org.openoakleaf.threading;

class ThreadShares {
	static var initor = init();
	static function init() {
		Critical = 512;
		Important = 256;
		Low = 64;
		Medium = 128;
		var max = 1;
		while (max > 0) {
			RealTime = max;
			max = (max << 1) | 1;
		}
	}
	/**
	 * Critical share. Threads with this share get twice as many steps as threads with ThreadPriority.Important.
	 */
	public static var Critical(default, null):Int;
	static function critical() return 512
	/**
	 * Important share. Threads with this share get twice as many steps as threads with ThreadPriority.Medium.
	 */
	public static var Important(default, null):Int;
	static function important() return 256
	/**
	 * Low share. Threads with this share get half the number of steps as threads with ThreadPriority.Medium. This share can be used for threads that do
	 *  not have to be stapped.
	 */
	public static var Low(default, null):Int;
	static function low() return 64
	/**
	 * Medium share. This share can be used for normal threads.
	 */
	public static var Medium(default, null):Int;
	static function medium() return 128
	/**
	 * Realtime share. this process will retrieve virtually all cpu time.
	 */
	public static var RealTime(default, null):Int;
}